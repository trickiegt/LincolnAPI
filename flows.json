[
    {
        "id": "0dc4f3cdcca4aa50",
        "type": "tab",
        "label": "Lincoln Control",
        "disabled": false,
        "info": "",
        "env": [
            {
                "name": "latitude",
                "value": "",
                "type": "str"
            },
            {
                "name": "longitude",
                "value": "",
                "type": "str"
            },
            {
                "name": "battery",
                "value": "",
                "type": "str"
            },
            {
                "name": "remoteStartStatus",
                "value": "",
                "type": "str"
            },
            {
                "name": "remoteStartDuration",
                "value": "",
                "type": "str"
            },
            {
                "name": "odometer",
                "value": "",
                "type": "str"
            },
            {
                "name": "fuelLevel",
                "value": "",
                "type": "str"
            },
            {
                "name": "tirePressure",
                "value": "",
                "type": "str"
            },
            {
                "name": "oilLife",
                "value": "",
                "type": "str"
            },
            {
                "name": "token",
                "value": "",
                "type": "str"
            },
            {
                "name": "refreshToken",
                "value": "",
                "type": "str"
            },
            {
                "name": "sessionID",
                "value": "",
                "type": "str"
            }
        ]
    },
    {
        "id": "44ef91a5b4f76e5d",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Details",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webGetAVD",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 330,
        "y": 40,
        "wires": [
            [
                "a10b76d2b0b528ee"
            ]
        ]
    },
    {
        "id": "b7570dccfb6ece8a",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "func": "//lets setup in NodeRed\n\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar data = {\n    \"PARAMS\":{\n        \"apiLevel\":\"3\",\n        \"forceUpdate\":\"1\",\n        \"lastUpdatedTime\":\"0\",\n        \"sessionId\": sessionID\n        }\n    };\n//{\"PARAMS\":{\"apiLevel\":\"3\",\"forceUpdate\":\"0\",\"lastUpdatedTime\":\"0\",\"sessionId\":\"_YOUR_SESSION_ID_\"}}\nvar jsonstr = JSON.stringify(data);\nvar url = \"https://phev.myfordmobile.com/services/webGetAVD\";\n\n\n\nmsg.payload = jsonstr;\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\nmsg.url = url;\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Request Sent at at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "44ef91a5b4f76e5d"
            ]
        ]
    },
    {
        "id": "f2da764eb55c79b7",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "every hour",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "b7570dccfb6ece8a"
            ]
        ]
    },
    {
        "id": "1356545d1595f63e",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Request Details for MKX",
        "info": "",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "6df04771ca8d975a",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Request",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webAddCommandPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 340,
        "y": 440,
        "wires": [
            [
                "200b44b12a839c3d"
            ]
        ]
    },
    {
        "id": "aac5d862e31f9f45",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Door Lock",
        "func": "//lets setup in NodeRed\nvar vin = \"_YOUR_VIN_\";\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar data = {\n    \"PARAMS\":{\n        \"apiLevel\":\"3\",\n        \"LOOKUPCODE\":\"LOCK_CMD\",\n        \"VIN\": vin,\n        \"SESSIONID\": sessionID\n        },\n    \"Entries\":{\n        \"Entry\":{\n            \"status\":\"Failed\"\n            }\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\n\nmsg.payload = jsonstr;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Lock Command Called at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "6df04771ca8d975a"
            ]
        ]
    },
    {
        "id": "2f83a8fa0f88e549",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "aac5d862e31f9f45"
            ]
        ]
    },
    {
        "id": "0b9d64ddfede87ac",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Check Status",
        "func": "//lets setup in NodeRed\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar commandID = msg.req.commandID\nvar data = {\n    \"PARAMS\":{\n        \"COMMANDID\": commandID,\n        \"SESSIONID\": sessionID\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\nmsg.payload = data;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Status Requested at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 560,
        "wires": [
            [
                "9b888a618fde1a48"
            ]
        ]
    },
    {
        "id": "b5e90e062b35f832",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Status",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webGetRemoteCommandStatusPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "1df61894b4c2f85a",
                "8abac21ac6d959c3"
            ]
        ]
    },
    {
        "id": "9b888a618fde1a48",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 620,
        "wires": [
            [
                "b5e90e062b35f832"
            ]
        ]
    },
    {
        "id": "1df61894b4c2f85a",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Que Check",
        "property": "payload.Entries.Entry.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "QUEUED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMPLETED",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 660,
        "wires": [
            [
                "af207f2a7fcf70bb"
            ],
            [
                "8acdb8bdf600e8bc"
            ],
            [
                "8acdb8bdf600e8bc"
            ]
        ]
    },
    {
        "id": "af207f2a7fcf70bb",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 600,
        "wires": [
            [
                "0b9d64ddfede87ac"
            ]
        ]
    },
    {
        "id": "2a228a986a0d60c2",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "req.commandID",
                "pt": "msg",
                "to": "payload.COMMANDID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 500,
        "wires": [
            [
                "0b9d64ddfede87ac"
            ]
        ]
    },
    {
        "id": "14c342d8a013bb9c",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Request LOCK for MKX",
        "info": "",
        "x": 100,
        "y": 440,
        "wires": []
    },
    {
        "id": "a347981794fa8e99",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Request",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webAddCommandPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 360,
        "y": 840,
        "wires": [
            [
                "380112be353aee14"
            ]
        ]
    },
    {
        "id": "9ef5e17b0b39aff3",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Door unLock",
        "func": "//lets setup in NodeRed\nvar vin = \"_YOUR_VIN_\";\nvar sessionID = \"_YOUR_SESSION_ID_\";\n\nvar data = {\n    \"PARAMS\":{\n        \"apiLevel\":\"3\",\n        \"LOOKUPCODE\":\"UNLOCK_CMD\",\n        \"VIN\": vin,\n        \"SESSIONID\": sessionID\n        },\n    \"Entries\":{\n        \"Entry\":{\n            \"status\":\"Failed\"\n            }\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\n\nmsg.payload = jsonstr;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `unLock Command Called at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 880,
        "wires": [
            [
                "a347981794fa8e99"
            ]
        ]
    },
    {
        "id": "8cdc334dd6b17c0c",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 860,
        "wires": [
            [
                "9ef5e17b0b39aff3"
            ]
        ]
    },
    {
        "id": "e1f531170158d4f5",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Check Status",
        "func": "//lets setup in NodeRed\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar commandID = msg.req.commandID\nvar data = {\n    \"PARAMS\":{\n        \"COMMANDID\": commandID,\n        \"SESSIONID\": sessionID\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\nmsg.payload = data;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Status Requested at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 960,
        "wires": [
            [
                "3a3121fd4030960b"
            ]
        ]
    },
    {
        "id": "64387045d85ed5ad",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Status",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webGetRemoteCommandStatusPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 390,
        "y": 1080,
        "wires": [
            [
                "1deaca9fa0bda892",
                "0a9e6764bb38271d"
            ]
        ]
    },
    {
        "id": "3a3121fd4030960b",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 1020,
        "wires": [
            [
                "64387045d85ed5ad"
            ]
        ]
    },
    {
        "id": "1deaca9fa0bda892",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Que Check",
        "property": "payload.Entries.Entry.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "QUEUED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMPLETED",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "efcefd36274b9b14"
            ],
            [
                "3e108bcd8d86b2fa"
            ],
            [
                "3e108bcd8d86b2fa"
            ]
        ]
    },
    {
        "id": "efcefd36274b9b14",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1000,
        "wires": [
            [
                "e1f531170158d4f5"
            ]
        ]
    },
    {
        "id": "03c7f23252bee86e",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "req.commandID",
                "pt": "msg",
                "to": "payload.COMMANDID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 900,
        "wires": [
            [
                "e1f531170158d4f5"
            ]
        ]
    },
    {
        "id": "788d6855b221245c",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Request unLOCK for MKX",
        "info": "",
        "x": 110,
        "y": 820,
        "wires": []
    },
    {
        "id": "2d5d44f1eea517b3",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Request Remote Start",
        "info": "",
        "x": 100,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2e6bc4ea251fc575",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1240,
        "wires": [
            [
                "b7beaa2adf1a5851"
            ]
        ]
    },
    {
        "id": "b7beaa2adf1a5851",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Remote Start",
        "func": "//lets setup in NodeRed\nvar vin = \"_YOUR_VIN_\";\nvar sessionID = \"_YOUR_SESSION_ID_\";\n\nvar data = {\n    \"PARAMS\":{\n        \"apiLevel\":\"3\",\n        \"LOOKUPCODE\":\"START_CMD\",\n        \"VIN\": vin,\n        \"SESSIONID\": sessionID\n        },\n    \"Entries\":{\n        \"Entry\":{\n            \"status\":\"Failed\"\n            }\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\n\nmsg.payload = jsonstr;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Start Command Called at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1260,
        "wires": [
            [
                "76995d49ea43ed19"
            ]
        ]
    },
    {
        "id": "76995d49ea43ed19",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Request",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webAddCommandPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 340,
        "y": 1220,
        "wires": [
            [
                "c5ff26040136068b"
            ]
        ]
    },
    {
        "id": "56b13e93a64c78c2",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Check Status",
        "func": "//lets setup in NodeRed\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar commandID = msg.req.commandID\nvar data = {\n    \"PARAMS\":{\n        \"COMMANDID\": commandID,\n        \"SESSIONID\": sessionID\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\nmsg.payload = data;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Status Requested at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1340,
        "wires": [
            [
                "508d4cd60937b93b"
            ]
        ]
    },
    {
        "id": "22bbba56e0129738",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Status",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webGetRemoteCommandStatusPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 490,
        "y": 1400,
        "wires": [
            [
                "cd93a64877cee257",
                "1c3b54a0ae119a88"
            ]
        ]
    },
    {
        "id": "508d4cd60937b93b",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 340,
        "y": 1400,
        "wires": [
            [
                "22bbba56e0129738"
            ]
        ]
    },
    {
        "id": "cd93a64877cee257",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Que Check",
        "property": "payload.Entries.Entry.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "QUEUED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMPLETED",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 670,
        "y": 1400,
        "wires": [
            [
                "2be4bf6178047350"
            ],
            [
                "e9970e152586075c"
            ],
            [
                "e9970e152586075c"
            ]
        ]
    },
    {
        "id": "2be4bf6178047350",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 1380,
        "wires": [
            [
                "56b13e93a64c78c2"
            ]
        ]
    },
    {
        "id": "dffe259dcf0826ae",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "req.commandID",
                "pt": "msg",
                "to": "payload.COMMANDID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1300,
        "wires": [
            [
                "56b13e93a64c78c2"
            ]
        ]
    },
    {
        "id": "6997a247f03f1ef1",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "auto remote start if at work (leaving at 11pm)",
        "info": "",
        "x": 160,
        "y": 2060,
        "wires": []
    },
    {
        "id": "4517c98a7cbde619",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "1055pm weekdays",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "55 22 * * 1,2,3,4,5",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 2100,
        "wires": [
            [
                "1024e47f48e2fb20"
            ]
        ]
    },
    {
        "id": "200b44b12a839c3d",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Proper Response",
        "property": "payload.COMMANDID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 480,
        "wires": [
            [
                "903d2f80c8fd1bc6"
            ],
            [
                "2a228a986a0d60c2"
            ]
        ]
    },
    {
        "id": "380112be353aee14",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Proper Response",
        "property": "payload.COMMANDID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 880,
        "wires": [
            [
                "33bc122e0b518e75"
            ],
            [
                "03c7f23252bee86e"
            ]
        ]
    },
    {
        "id": "c5ff26040136068b",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Proper Response",
        "property": "payload.COMMANDID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1260,
        "wires": [
            [
                "2edb1ecb3c2b3c69"
            ],
            [
                "dffe259dcf0826ae"
            ]
        ]
    },
    {
        "id": "a10b76d2b0b528ee",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Proper Response",
        "property": "payload.avdQueryResponse.customerData.zipcode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "80b4c9222be58805",
                "884589aa34e40e0b"
            ],
            [
                "e9f8b0c4a27f25a9"
            ]
        ]
    },
    {
        "id": "2edb1ecb3c2b3c69",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Max Starts or bad sess",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "501",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6000",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 700,
        "y": 1240,
        "wires": [
            [
                "02f28ff9c5fdab24"
            ],
            [
                "bf44c9f82d8f395f"
            ]
        ],
        "outputLabels": [
            "No Starts Left - drive car first",
            "Bad sessionID"
        ]
    },
    {
        "id": "97623d6ea4695492",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Details",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mps.ford.com/api/oauth2/v1/refresh",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "d5a3f549951b7f29"
            ]
        ]
    },
    {
        "id": "04177779ab264330",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Refresh Token",
        "func": "//lets setup in NodeRed\n\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar data = {\n    \"refresh_token\":\"_YOUR_REFRESH_TOKEN_\"\n    };\nvar jsonstr = JSON.stringify(data);\n\nvar url = \"https://api.mps.ford.com/api/oauth2/v1/refresh\";\n\n\n\nmsg.payload = data;\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\n//msg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\nmsg.headers['application-id'] = '45133B88-0671-4AAF-B8D1-99E684ED4E45';\nmsg.url = url;\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Requested Token Refresh at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 280,
        "wires": [
            [
                "97623d6ea4695492"
            ]
        ]
    },
    {
        "id": "ca8ae357f448bf72",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "Everyday at Noon",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "04177779ab264330"
            ]
        ]
    },
    {
        "id": "d5a3f549951b7f29",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Proper Response",
        "property": "payload.refresh_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 280,
        "wires": [
            [
                "95edd0e05ed3f617"
            ],
            [
                "3665d95e4ec169a2"
            ]
        ]
    },
    {
        "id": "70c512abeb267736",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Refresh Token",
        "info": "",
        "x": 70,
        "y": 200,
        "wires": []
    },
    {
        "id": "95edd0e05ed3f617",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "TokenRefresh Failed",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "{\"title\":\"Lost Token for Lincoln\",\"message\":\"You will need to figure out a new token / sessionID\",\"data\":{\"colour\":\"red\"}}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 690,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e9f8b0c4a27f25a9",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Update Flow Variables",
        "func": "flow.set([\"latitude\"], parseFloat(msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.vehicleLatitude));\nflow.set([\"longitude\"], parseFloat(msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.vehicleLongitude));\nvar startStatus = msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.remoteStartStatus;\nstartStatus = startStatus.slice(2);\nflow.set([\"remoteStartStatus\"], startStatus);\nflow.set([\"remoteStartDuration\"], parseInt(msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.remoteStartDuration));\nvar battery = msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.batteryHealth;\nbattery = battery.slice(2);\nflow.set([\"battery\"], battery);\nvar numb = parseInt(msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.odometer)*0.621371;\nflow.set([\"odometer\"], parseInt(numb));\nflow.set([\"fuelLevel\"], parseInt(msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.fuelLevel));\nvar tire = msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.tirePressure;\ntire = tire.slice(2);\nflow.set([\"tirePressure\"], tire);\n\n//Sometimes Lincoln reports oil life at 0 when it isnt\n//Check previous result and keep old result if current =0\nvar oilLife = parseInt(msg.payload.avdQueryResponse.customerData.vehicleData.vehicle.oilLife);\nvar prevOilLife = flow.get([\"oilLife\"]);\nif ((oilLife == 0) && (prevOilLife >4)){}\nelse\n    flow.set([\"oilLife\"], oilLife);\n\n\n\n////////////////////////\n//////////////////////\n///Check Distance//////\n//////////////////////\n\nflow.set([\"location\"], global.get(\"homeassistant.homeAssistant.states['device_tracker.mkx_location'].state\"));\n\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Current Fuel Level ${flow.get([\"fuelLevel\"])} at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "8b4196429d69f26e"
            ]
        ]
    },
    {
        "id": "ec8a6b917897f575",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "Request at 6:30pm",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 18 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 1900,
        "wires": [
            [
                "5cfe41b383d73764"
            ]
        ]
    },
    {
        "id": "e53973b58eb9ed69",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Temp for 11pm",
        "info": "",
        "x": 90,
        "y": 1860,
        "wires": []
    },
    {
        "id": "1024e47f48e2fb20",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "CheckTempRange",
        "property": "temperature",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lte",
                "v": "55",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "83",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 2100,
        "wires": [
            [
                "76f66de5284feaf6"
            ],
            [
                "76f66de5284feaf6"
            ]
        ]
    },
    {
        "id": "bf44c9f82d8f395f",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Failed",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "{\"title\":\"Command Failed\",\"message\":\"Token or SessionID is probably invaild\",\"data\":{\"colour\":\"red\"}}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 890,
        "y": 1260,
        "wires": [
            [
                "02f28ff9c5fdab24"
            ]
        ]
    },
    {
        "id": "33bc122e0b518e75",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Failed",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "{\"title\":\"Command Failed\",\"message\":\"Token or SessionID is probably invaild\",\"data\":{\"colour\":\"red\"}}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 650,
        "y": 840,
        "wires": [
            [
                "0f520d2deb246314"
            ]
        ]
    },
    {
        "id": "903d2f80c8fd1bc6",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Failed",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "{\"title\":\"Command Failed\",\"message\":\"Token or SessionID is probably invaild\",\"data\":{\"colour\":\"red\"}}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "cd389ac842647e23"
            ]
        ]
    },
    {
        "id": "80b4c9222be58805",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Failed",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "{\"title\":\"Command Failed\",\"message\":\"Token or SessionID is probably invaild\",\"data\":{\"colour\":\"red\"}}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 690,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "2deef0df32fb9597",
        "type": "link in",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "links": [
            "30ae179111a32de6",
            "61308bc5c1013b97",
            "e0ed304ecaa644a0",
            "a07fedb0999c1a42",
            "d880099869696a7e",
            "d8ed75f35cccaead",
            "d84bbdbdb91b49c4",
            "c2a50da9b2cdc12d",
            "5e9f77340aec0d07",
            "0157b742149647f8",
            "870f94513d498f50"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "b7570dccfb6ece8a"
            ]
        ]
    },
    {
        "id": "8acdb8bdf600e8bc",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Result",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "\t{\t   \"title\": msg.payload.Entries.Entry.lookupcode,\t   \"message\": msg.payload.Entries.Entry.status,\t   \"data\": {        \"colour\": \"red\"    }\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 710,
        "y": 660,
        "wires": [
            [
                "cfe3d1e6147a1a19"
            ]
        ]
    },
    {
        "id": "3e108bcd8d86b2fa",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Result",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "\t{\t   \"title\": msg.payload.Entries.Entry.lookupcode,\t   \"message\": msg.payload.Entries.Entry.status,\t   \"data\": {        \"colour\": \"red\"    }\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "139d975732fe2569"
            ]
        ]
    },
    {
        "id": "e9970e152586075c",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Result",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "\t{\t   \"title\": msg.payload.Entries.Entry.lookupcode,\t   \"message\": msg.payload.Entries.Entry.status,\t   \"data\": {        \"colour\": \"red\"    }\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 850,
        "y": 1420,
        "wires": [
            [
                "e6e97c6dcf3c8fca"
            ]
        ]
    },
    {
        "id": "3665d95e4ec169a2",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Update Flow Variables",
        "func": "flow.set([\"zaccess_token\"], msg.payload.access_token);\nflow.set([\"zrefresh_token\"], msg.payload.refresh_token);\nflow.set([\"zcat1_token\"], msg.payload.cat1_token);\nflow.set([\"userId\"], msg.payload.userId);\nflow.set([\"zexpires_in\"], msg.payload.expires_in);\nflow.set([\"zrefresh_expires_in\"], msg.payload.refresh_expires_in);\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Current Token Expires in: ${flow.get([\"zrefresh_expires_in\"])}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "a07fedb0999c1a42"
            ]
        ]
    },
    {
        "id": "8b4196429d69f26e",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "gather and sort all values",
        "func": "var allFlow = flow.keys();\nvar compiled = {};\nvar inOrder = [];\nfor(var i = 0; i < allFlow.length; i++)\n{\n    \n    inOrder[i] = allFlow[i];\n    msg.lastInOrder = inOrder[i];\n}\n\ninOrder.sort();\nfor( i = 0; i < inOrder.length; i++)\n{\n    compiled[inOrder[i]]=flow.get([inOrder[i]]);\n    //compiled[inOrder[i]]=flow.get([inOrder[i]]).toString();\n}\nmsg.payload = compiled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "5290a2d69ca4463a"
            ]
        ]
    },
    {
        "id": "5290a2d69ca4463a",
        "type": "file",
        "z": "0dc4f3cdcca4aa50",
        "name": "Store Variables",
        "filename": "/config/www/lincVariables.json",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 80,
        "wires": [
            [
                "033e569d744644cc"
            ]
        ]
    },
    {
        "id": "884589aa34e40e0b",
        "type": "file in",
        "z": "0dc4f3cdcca4aa50",
        "name": "Read Variables",
        "filename": "/config/www/lincVariables.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "c072f5f1dfbedceb"
            ]
        ]
    },
    {
        "id": "82559da1fb3128a1",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "7",
        "topic": "",
        "payloadType": "date",
        "x": 990,
        "y": 240,
        "wires": [
            [
                "884589aa34e40e0b"
            ]
        ]
    },
    {
        "id": "c072f5f1dfbedceb",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "make it json agian",
        "func": "var original = msg.payload;\nvar replaced = original.split(\"[\").join(\"\");\nreplaced = replaced.split(\"]\").join(\"\");\nreplaced = JSON.parse(replaced);\n//var jsonstr = JSON.parse(msg.payload);\nmsg.payload = replaced;\nflow.set([\"atWork\"], msg.payload.atWork);\nflow.set([\"temperature\"], msg.payload.temperature);\nflow.set([\"temptmrw\"], msg.payload.temptmrw);\nflow.set([\"latitude\"], msg.payload.latitude);\nflow.set([\"longitude\"], msg.payload.longitude);\nflow.set([\"remoteStartStatus\"], msg.payload.remoteStartStatus);\nflow.set([\"remoteStartDuration\"], msg.payload.remoteStartDuration);\nflow.set([\"battery\"], msg.payload.battery);\nflow.set([\"odometer\"], msg.payload.odometer);\nflow.set([\"fuelLevel\"], msg.payload.fuelLevel);\nflow.set([\"tirePressure\"], msg.payload.tirePressure);\nflow.set([\"oilLife\"], msg.payload.oilLife);\n\n\nflow.set([\"zaccess_token\"], msg.payload.zaccess_token);\nflow.set([\"zrefresh_token\"], msg.payload.zrefresh_token);\nflow.set([\"zcat1_token\"], msg.payload.zcat1_token);\nflow.set([\"userId\"], msg.payload.userId);\nflow.set([\"zexpires_in\"], msg.payload.zexpires_in);\nflow.set([\"zrefresh_expires_in\"], msg.payload.zrefresh_expires_in);\n\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Loaded and stored Vars at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 280,
        "wires": [
            [
                "033e569d744644cc"
            ]
        ]
    },
    {
        "id": "76f66de5284feaf6",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "At Work?",
        "property": "location",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "PMUSA",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 540,
        "y": 2100,
        "wires": [
            [
                "5b50f89c4d13ad07"
            ]
        ]
    },
    {
        "id": "a07fedb0999c1a42",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 655,
        "y": 320,
        "wires": []
    },
    {
        "id": "818d5f9bd9c5cd87",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Store Flow Values to file",
        "info": "",
        "x": 980,
        "y": 40,
        "wires": []
    },
    {
        "id": "e7b8386d18799734",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Retrieve Flow Values from file",
        "info": "",
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "b824fee361f85be5",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.fuelLevel",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Fuel Level"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "fuelLevel",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.fuelLevel",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2020,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "967eb28168e434ef",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.battery",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Battery Status"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "battery",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.battery",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2010,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "789d3e6209089de5",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.odometer",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Odometer"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "odometer",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.odometer",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2020,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8514e31af9086d3f",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.oilLife",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Oil Life"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "oilLife",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.oilLife",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2010,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d2464ea3535804e9",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.tirePressure",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Tire Pressure"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "tirePressure",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.tirePressure",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2030,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "017b5bdf64a32288",
        "type": "link in",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "links": [
            "033e569d744644cc"
        ],
        "x": 1835,
        "y": 200,
        "wires": [
            [
                "b824fee361f85be5",
                "967eb28168e434ef",
                "789d3e6209089de5",
                "8514e31af9086d3f",
                "d2464ea3535804e9",
                "2a6f36dd3a1e99c0",
                "89ae4988291a561a"
            ]
        ]
    },
    {
        "id": "033e569d744644cc",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "017b5bdf64a32288"
        ],
        "x": 1335,
        "y": 180,
        "wires": []
    },
    {
        "id": "01905e2efdd73cfd",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Copy Values to HA Sensors",
        "info": "",
        "x": 1860,
        "y": 20,
        "wires": []
    },
    {
        "id": "f3836fde25d90ac7",
        "type": "server-state-changed",
        "z": "0dc4f3cdcca4aa50",
        "name": "HA Request Lock",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.mkx_lock",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 80,
        "y": 520,
        "wires": [
            [
                "aac5d862e31f9f45"
            ],
            []
        ]
    },
    {
        "id": "cd389ac842647e23",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_lock",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 780,
        "y": 440,
        "wires": [
            [
                "c2a50da9b2cdc12d",
                "2291bd599dc348fb"
            ]
        ]
    },
    {
        "id": "02dfa84f03ccf217",
        "type": "server-state-changed",
        "z": "0dc4f3cdcca4aa50",
        "name": "HA Request Unlock",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.mkx_unlock",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 90,
        "y": 900,
        "wires": [
            [
                "9ef5e17b0b39aff3"
            ],
            []
        ]
    },
    {
        "id": "139d975732fe2569",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_unlock",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "d84bbdbdb91b49c4",
                "d6789e9b060c1e4c"
            ]
        ]
    },
    {
        "id": "0f520d2deb246314",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_unlock",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 800,
        "y": 840,
        "wires": [
            [
                "d84bbdbdb91b49c4",
                "d6789e9b060c1e4c"
            ]
        ]
    },
    {
        "id": "cfe3d1e6147a1a19",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_lock",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 880,
        "y": 620,
        "wires": [
            [
                "c2a50da9b2cdc12d",
                "2291bd599dc348fb"
            ]
        ]
    },
    {
        "id": "16703433f254d5b3",
        "type": "server-state-changed",
        "z": "0dc4f3cdcca4aa50",
        "name": "HA Request Start",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.mkx_start",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 100,
        "y": 1280,
        "wires": [
            [
                "b7beaa2adf1a5851"
            ],
            []
        ]
    },
    {
        "id": "02f28ff9c5fdab24",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_start",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 960,
        "y": 1200,
        "wires": [
            [
                "d8ed75f35cccaead",
                "42944826540f2520"
            ]
        ]
    },
    {
        "id": "e6e97c6dcf3c8fca",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_start",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1040,
        "y": 1420,
        "wires": [
            [
                "d8ed75f35cccaead",
                "42944826540f2520"
            ]
        ]
    },
    {
        "id": "9a2e93c252d98476",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.remoteDuration",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Remote Duration"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "remoteStartTimeLeft",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.remote_duration",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2020,
        "y": 600,
        "wires": [
            [
                "d6584529632e5526"
            ]
        ]
    },
    {
        "id": "d6584529632e5526",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Monitor Duration",
        "property": "remoteStartTimeLeft",
        "propertyType": "flow",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 2270,
        "y": 600,
        "wires": [
            [
                "0157b742149647f8"
            ],
            [
                "87035058a0e4202c"
            ]
        ]
    },
    {
        "id": "87035058a0e4202c",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2440,
        "y": 620,
        "wires": [
            [
                "941feb247ba78f3c"
            ]
        ]
    },
    {
        "id": "d8ed75f35cccaead",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 1095,
        "y": 1320,
        "wires": []
    },
    {
        "id": "d84bbdbdb91b49c4",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 955,
        "y": 940,
        "wires": []
    },
    {
        "id": "c2a50da9b2cdc12d",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 935,
        "y": 520,
        "wires": []
    },
    {
        "id": "be639786267e2475",
        "type": "server-state-changed",
        "z": "0dc4f3cdcca4aa50",
        "name": "Check for start and make timer",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "sensor.mkx_remote_status",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "STATUS_TRUE",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "remoteStartTimeLeft",
                "propertyType": "flow",
                "value": "600",
                "valueType": "num"
            }
        ],
        "x": 1730,
        "y": 600,
        "wires": [
            [
                "9a2e93c252d98476"
            ],
            []
        ]
    },
    {
        "id": "941feb247ba78f3c",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "reduce time by 5sec",
        "func": "flow.set([\"remoteStartTimeLeft\"], flow.get([\"remoteStartTimeLeft\"])-5);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 740,
        "wires": [
            [
                "9a2e93c252d98476"
            ]
        ]
    },
    {
        "id": "2a6f36dd3a1e99c0",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.remoteStatus",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "MKX Remote Status"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "remoteStartStatus",
        "stateType": "flow",
        "attributes": [
            {
                "property": "entity_id",
                "value": "sensor.mkx.remoteStatus",
                "valueType": "str"
            }
        ],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2030,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "94d1429bcae15831",
        "type": "comment",
        "z": "0dc4f3cdcca4aa50",
        "name": "Cancel Remote Start",
        "info": "",
        "x": 90,
        "y": 1540,
        "wires": []
    },
    {
        "id": "61618c6656ebcbc0",
        "type": "inject",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1580,
        "wires": [
            [
                "76b8a9cc77eceef9"
            ]
        ]
    },
    {
        "id": "76b8a9cc77eceef9",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Cancel Remote Start",
        "func": "//lets setup in NodeRed\nvar vin = \"_YOUR_VIN_\";\nvar sessionID = \"_YOUR_SESSION_ID_\";\n\nvar data = {\n    \"PARAMS\":{\n        \"apiLevel\":\"3\",\n        \"LOOKUPCODE\":\"CANCEL_START_CMD\",\n        \"VIN\": vin,\n        \"SESSIONID\": sessionID\n        },\n    \"Entries\":{\n        \"Entry\":{\n            \"status\":\"Failed\"\n            }\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\n\nmsg.payload = jsonstr;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Start Command Called at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1600,
        "wires": [
            [
                "57b18249fbab5343"
            ]
        ]
    },
    {
        "id": "57b18249fbab5343",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Request",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webAddCommandPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 380,
        "y": 1560,
        "wires": [
            [
                "955c00be512f9b91"
            ]
        ]
    },
    {
        "id": "6359ac2f80e99e86",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Check Status",
        "func": "//lets setup in NodeRed\nvar sessionID = \"_YOUR_SESSION_ID_\";\nvar commandID = msg.req.commandID\nvar data = {\n    \"PARAMS\":{\n        \"COMMANDID\": commandID,\n        \"SESSIONID\": sessionID\n        }\n    };\nvar jsonstr = JSON.stringify(data);\n\nmsg.payload = data;\nmsg.headers = {};\nmsg.headers['Accept'] = '*/*';\nmsg.headers['content-type'] = 'application/json; charset=UTF-8';\nmsg.headers['Host'] = 'phev.myfordmobile.com';\nmsg.headers['Connection'] = 'Keep-Alive';\nmsg.headers['User-Agent'] = 'okhttp/4.9.0';\nmsg.headers['Accept-Encoding'] = 'gzip, deflate, br';\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Status Requested at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1660,
        "wires": [
            [
                "9b06e78b5b673365"
            ]
        ]
    },
    {
        "id": "97067b0bd33c9cc9",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Status",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://phev.myfordmobile.com/services/webGetRemoteCommandStatusPS",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 470,
        "y": 1740,
        "wires": [
            [
                "7114fb70a31d575a",
                "1dbf75a75028fc36"
            ]
        ]
    },
    {
        "id": "9b06e78b5b673365",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1740,
        "wires": [
            [
                "97067b0bd33c9cc9"
            ]
        ]
    },
    {
        "id": "7114fb70a31d575a",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Que Check",
        "property": "payload.Entries.Entry.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "QUEUED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COMPLETED",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 650,
        "y": 1740,
        "wires": [
            [
                "4cf906831f3708ab"
            ],
            [
                "ceca70e87f5634d8"
            ],
            [
                "ceca70e87f5634d8"
            ]
        ]
    },
    {
        "id": "4cf906831f3708ab",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 1700,
        "wires": [
            [
                "6359ac2f80e99e86"
            ]
        ]
    },
    {
        "id": "13c4f45850600317",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "req.commandID",
                "pt": "msg",
                "to": "payload.COMMANDID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1620,
        "wires": [
            [
                "6359ac2f80e99e86"
            ]
        ]
    },
    {
        "id": "955c00be512f9b91",
        "type": "switch",
        "z": "0dc4f3cdcca4aa50",
        "name": "Proper Response",
        "property": "payload.COMMANDID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 1600,
        "wires": [
            [
                "801b6d8f5042e205"
            ],
            [
                "13c4f45850600317"
            ]
        ]
    },
    {
        "id": "801b6d8f5042e205",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Failed",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "{\"title\":\"Command Failed\",\"message\":\"Token or SessionID is probably invaild\",\"data\":{\"colour\":\"red\"}}",
        "dataType": "json",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 690,
        "y": 1560,
        "wires": [
            [
                "821342b12862dcf4"
            ]
        ]
    },
    {
        "id": "ceca70e87f5634d8",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Result",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_chriscell",
        "entityId": "",
        "data": "\t{\t   \"title\": msg.payload.Entries.Entry.lookupcode,\t   \"message\": msg.payload.Entries.Entry.status,\t   \"data\": {        \"colour\": \"red\"    }\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 830,
        "y": 1760,
        "wires": [
            [
                "150b864f8bf34d1f"
            ]
        ]
    },
    {
        "id": "d1e48ae2ecfa6160",
        "type": "server-state-changed",
        "z": "0dc4f3cdcca4aa50",
        "name": "HA Request Cancel",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.mkx_cancelstart",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 90,
        "y": 1620,
        "wires": [
            [
                "76b8a9cc77eceef9"
            ],
            []
        ]
    },
    {
        "id": "150b864f8bf34d1f",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "toggle bool off",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.mkx_cancelstart",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 1000,
        "y": 1760,
        "wires": [
            [
                "5e9f77340aec0d07",
                "821342b12862dcf4"
            ]
        ]
    },
    {
        "id": "5e9f77340aec0d07",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 1135,
        "y": 1760,
        "wires": []
    },
    {
        "id": "0157b742149647f8",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 2395,
        "y": 580,
        "wires": []
    },
    {
        "id": "5cfe41b383d73764",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Weather Quadrant",
        "func": "//lets setup in NodeRed\n\nvar urlLink = 'https://api.weather.gov/points/'+flow.get([\"latitude\"])+','+flow.get([\"longitude\"]);\n\nmsg.payload = \"Weather Please\";\nmsg.url = urlLink;\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Called at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1940,
        "wires": [
            [
                "1aa11f7dcedd2aaa"
            ]
        ]
    },
    {
        "id": "1aa11f7dcedd2aaa",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Send Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 340,
        "y": 1940,
        "wires": [
            [
                "73c73d4cd18a941d"
            ]
        ]
    },
    {
        "id": "f9f8cf8fd4a40256",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Pull weather and Check if at work",
        "func": "/*\nI normally leave work at 11pm\nSo I am grabbing the temperature for that time\nand storing it into a file in case the server is down\n*/\nvar payload = msg.payload;\n//msg.temperature = 0;\nvar date = new Date().toISOString('en-US', {\n    year: 'numeric',\n    month: '2-digit',\n    day: 'numeric'\n}).split('T')[0]\ndate += \"T23:00\"; //look for 11pm\n\n\n//Verify Server Response\nif (msg.statusCode == 200)\n{\n    //Find Time Slot I need to use\n    for(var i = 0; i < 40; i++)\n    {\n        startTime = payload.properties.periods[i].startTime;\n        if(startTime.includes(date))\n        {\n            //msg.payload.properties.periods[3].temperature\n            msg.temperature = msg.payload.properties.periods[i].temperature;\n            msg.temptmrw = msg.payload.properties.periods[i+24].temperature;\n            flow.set([\"temperature\"], msg.temperature);\n            flow.set([\"temptmrw\"], msg.temptmrw);\n        }\n    }\n}\nelse\n{\n    if (flow.get([\"temptmrw\"]) == null)\n    {\n        //no temp known\n        flow.set([\"temperature\"], global.get('homeassistant.homeAssistant.states[\"weather.home_2\"].attributes.temperature'));\n        //We will ask our weather sensor\n        //May be useless though as it will report home weather\n        //not where the vehicle is located\n        \n    }\n    else\n    {\n        flow.set([\"temperature\"], flow.get([\"temptmrw\"]));\n        flow.set([\"temptmrw\"], null);\n    }\n}\n\n////////////////////////\n//////////////////////\n///Check Location//////\n//////////////////////\nflow.set([\"location\"], global.get(\"homeassistant.homeAssistant.states['device_tracker.mkx_location'].state\"));\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar statusText = `MKX is: ${flow.get(\"location\")} at ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1940,
        "wires": [
            [
                "870f94513d498f50"
            ]
        ]
    },
    {
        "id": "73c73d4cd18a941d",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Weather Hourly",
        "func": "//lets setup in NodeRed\n//payload.properties.forecastHourly\nvar urlLink = msg.payload.properties.forecastHourly;\n\nmsg.payload = \"Weather Please\";\nmsg.url = urlLink;\n\n\n////////////////////////////////////////////////////\n////Display information under node for reference////\n////////////////////////////////////////////////////\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\n\nvar statusText = `Called at: ${date}`\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1940,
        "wires": [
            [
                "4545b73052c008c8"
            ]
        ]
    },
    {
        "id": "4545b73052c008c8",
        "type": "http request",
        "z": "0dc4f3cdcca4aa50",
        "name": "Get Weather",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 710,
        "y": 1940,
        "wires": [
            [
                "f9f8cf8fd4a40256"
            ]
        ]
    },
    {
        "id": "870f94513d498f50",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "2deef0df32fb9597"
        ],
        "x": 1115,
        "y": 1940,
        "wires": []
    },
    {
        "id": "d6789e9b060c1e4c",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 940,
        "wires": [
            [
                "5a1a71c795481715"
            ]
        ]
    },
    {
        "id": "2291bd599dc348fb",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "b85178e04bb5d2f0"
            ]
        ]
    },
    {
        "id": "42944826540f2520",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1220,
        "y": 1300,
        "wires": [
            [
                "d1c485b49530a593"
            ]
        ]
    },
    {
        "id": "821342b12862dcf4",
        "type": "delay",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 1660,
        "wires": [
            [
                "8fc484f34c81e683"
            ]
        ]
    },
    {
        "id": "265d4ea6bc8337e3",
        "type": "ha-entity",
        "z": "0dc4f3cdcca4aa50",
        "name": "mkx.commandActive",
        "server": "da3b2d1e.ad751",
        "version": 1,
        "debugenabled": false,
        "outputs": 1,
        "entityType": "sensor",
        "config": [
            {
                "property": "name",
                "value": "mkx.command_active"
            },
            {
                "property": "device_class",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            },
            {
                "property": "unit_of_measurement",
                "value": ""
            }
        ],
        "state": "payload.Entries.Entry.status",
        "stateType": "msg",
        "attributes": [],
        "resend": true,
        "outputLocation": "payload",
        "outputLocationType": "none",
        "inputOverride": "allow",
        "outputOnStateChange": false,
        "outputPayload": "$entity().state ? \"on\": \"off\"",
        "outputPayloadType": "jsonata",
        "x": 2040,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8abac21ac6d959c3",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 475,
        "y": 720,
        "wires": []
    },
    {
        "id": "c7d58ef298602d20",
        "type": "link in",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "links": [
            "8abac21ac6d959c3",
            "0a9e6764bb38271d",
            "1c3b54a0ae119a88",
            "9ca3edbbabf6d65c",
            "1dbf75a75028fc36",
            "0e0a2bb100123074",
            "21479de4eb685aef",
            "0a2b0f43908eeb71",
            "48bfd39df6fd55e0",
            "15426dde43feca80"
        ],
        "x": 1895,
        "y": 500,
        "wires": [
            [
                "265d4ea6bc8337e3"
            ]
        ]
    },
    {
        "id": "0a9e6764bb38271d",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 495,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1c3b54a0ae119a88",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 555,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1dbf75a75028fc36",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 555,
        "y": 1780,
        "wires": []
    },
    {
        "id": "b85178e04bb5d2f0",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "Clear Command Active",
        "rules": [
            {
                "t": "set",
                "p": "payload.Entries.Entry.status",
                "pt": "msg",
                "to": "null",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "0e0a2bb100123074"
            ]
        ]
    },
    {
        "id": "0e0a2bb100123074",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 1395,
        "y": 500,
        "wires": []
    },
    {
        "id": "5a1a71c795481715",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "Clear Command Active",
        "rules": [
            {
                "t": "set",
                "p": "payload.Entries.Entry.status",
                "pt": "msg",
                "to": "null",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 940,
        "wires": [
            [
                "21479de4eb685aef"
            ]
        ]
    },
    {
        "id": "21479de4eb685aef",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 1435,
        "y": 940,
        "wires": []
    },
    {
        "id": "d1c485b49530a593",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "Clear Command Active",
        "rules": [
            {
                "t": "set",
                "p": "payload.Entries.Entry.status",
                "pt": "msg",
                "to": "null",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1400,
        "y": 1300,
        "wires": [
            [
                "0a2b0f43908eeb71"
            ]
        ]
    },
    {
        "id": "0a2b0f43908eeb71",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 1535,
        "y": 1300,
        "wires": []
    },
    {
        "id": "8fc484f34c81e683",
        "type": "change",
        "z": "0dc4f3cdcca4aa50",
        "name": "Clear Command Active",
        "rules": [
            {
                "t": "set",
                "p": "payload.Entries.Entry.status",
                "pt": "msg",
                "to": "null",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 1660,
        "wires": [
            [
                "15426dde43feca80"
            ]
        ]
    },
    {
        "id": "15426dde43feca80",
        "type": "link out",
        "z": "0dc4f3cdcca4aa50",
        "name": "",
        "mode": "link",
        "links": [
            "c7d58ef298602d20"
        ],
        "x": 1415,
        "y": 1660,
        "wires": []
    },
    {
        "id": "5b50f89c4d13ad07",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "Request Remote Start",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_on",
        "entityId": "input_boolean.mkx_start",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 740,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "dbf77f04eb4d9568",
        "type": "api-call-service",
        "z": "0dc4f3cdcca4aa50",
        "name": "set location",
        "server": "da3b2d1e.ad751",
        "version": 3,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "jsonata",
        "mergecontext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2230,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "89ae4988291a561a",
        "type": "function",
        "z": "0dc4f3cdcca4aa50",
        "name": "Set Location",
        "func": "var d=new Date();\nvar date = new Date().toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour12: false,\n    hour: 'numeric',\n    minute: 'numeric'\n})\nvar lat = flow.get('latitude');\nvar lon = flow.get('longitude');\nmsg.payload = {\n    domain: 'device_tracker',\n    service: 'see',\n    data: {\n   \"dev_id\": \"mkx_location\",\n   \"gps_accuracy\": 20,\n   \"gps\": [\n       lat,\n       lon\n    ]\n    }\n}\nvar statusText = `Ran at: ${date}`;\nnode.status({fill: \"green\", shape: \"dot\", text: statusText});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 360,
        "wires": [
            [
                "dbf77f04eb4d9568"
            ]
        ]
    },
    {
        "id": "da3b2d1e.ad751",
        "type": "server",
        "name": "Home Assistant",
        "version": 1,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true
    }
]